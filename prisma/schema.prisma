// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int     @id @default(autoincrement())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Question      Question[]
  Answer        Answer[]
  hasPrivilege  Boolean?
  isRestricted  Boolean?
  Reply         Reply[]
  role          Role @default(USER)
  request       Request?
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id          Int   @id @default(autoincrement())
  category    Category
  content     String
  userEmail   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  user        User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  Answer      Answer[]
}

enum Category {
  WebDevelopment
  MobileDevelopment
  DataScience
  ArtificialIntelligence
}

model Answer {
  id         Int   @id @default(autoincrement())
  questionId Int
  content    String
  userEmail     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime? @updatedAt
  user       User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  TotalVotes Int   @default(0)
  Reply      Reply[]
}

model Reply {
  id        Int   @id @default(autoincrement())
  content   String
  userEmail String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  user      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  Answer    Answer   @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Request {
  id        Int   @id @default(autoincrement())
  userEmail    String
  status    Status   @default(pending)
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  user      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

enum Status {
  pending
  accepted
  rejected
}
